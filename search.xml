<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《极客与团队》书摘</title>
    <url>/2021/04/13/Team%20Geek%20Review/</url>
    <content><![CDATA[<h1 id="《极客与团队》书摘"><a href="#《极客与团队》书摘" class="headerlink" title="《极客与团队》书摘"></a>《极客与团队》书摘</h1><blockquote>
<p>本书是专门写给程序员看的团队管理书籍。比起其他管理书籍，这本书比较薄，才170多页。我没看此书此前，在自己项目管理中或多或少用了里面的一些理念，这本书很好的把精华写出来了。本书其实围绕如何维护一个健康有效率的社区，很多经验可以借鉴一下。</p>
</blockquote>
<!-- ![封面](https://raw.githubusercontent.com/LuoJimmy/picture-server/master/s26354473.jpg) -->
<img src="https://raw.githubusercontent.com/LuoJimmy/picture-server/master/s26354473.jpg" title="封面" style="margin-left: auto; margin-right: auto"/>

<p>​    此书分为六章。第一章以天才程序员开头，毕竟天才极少，还是要靠团队完成任务。由此引出去全书的主题：HRT(hummer respect trust)，谦虚、尊重、信任。第二章培养团队文化，文化是啥？为什么要培养团队文化？以及一些好的方法。第三章把<del>项目经理</del>（主管）比作是大海航行的船长，”仆人式主管”，须为团队服务，然后还讲了领导的一些处世之道和激励。第四章将如何对付害群之马，保护团队。第五章如何管理团队组织。第六章程序员也要有服务用户意识，软件需要用户友好，需要包装和营销。</p>
<span id="more"></span>
<h2 id="第一章-天才程序员的传说"><a href="#第一章-天才程序员的传说" class="headerlink" title="第一章 天才程序员的传说"></a>第一章 天才程序员的传说</h2><h3 id="帮我把代码藏起来"><a href="#帮我把代码藏起来" class="headerlink" title="帮我把代码藏起来"></a>帮我把代码藏起来</h3><ul>
<li>人的本性——没有人喜欢人批评，特别是未完成的工作。缺乏安全感，可能会隐藏更大的问题。</li>
</ul>
<h3 id="天才的传说"><a href="#天才的传说" class="headerlink" title="天才的传说"></a>天才的传说</h3><ul>
<li>迈克尔&middot;乔丹、莱纳斯&middot;托瓦兹、比尔&middot;盖茨。集体荣誉算在一个人身上。</li>
<li>我们需要榜样的激励。</li>
</ul>
<h3 id="隐瞒是有害的"><a href="#隐瞒是有害的" class="headerlink" title="隐瞒是有害的"></a>隐瞒是有害的</h3><ul>
<li>闭门造车。</li>
<li>确保失败尽早发生，尽快发生，经常发生。尽早分享不仅仅可以防止一开始就步入歧途和检验创意。</li>
<li>公车因子，保证工作的可替代性。</li>
<li>足够多的眼睛可以确保你的项目保持正确的方向。</li>
</ul>
<h3 id="团队才是王道"><a href="#团队才是王道" class="headerlink" title="团队才是王道"></a>团队才是王道</h3><ul>
<li>软件开发是集体项目</li>
</ul>
<h3 id="三大支柱"><a href="#三大支柱" class="headerlink" title="三大支柱"></a>三大支柱</h3><ul>
<li>谦虚、尊重、信任</li>
</ul>
<h3 id="HRT实战"><a href="#HRT实战" class="headerlink" title="HRT实战"></a>HRT实战</h3><ul>
<li><p>放下自负</p>
</li>
<li><p>学会批评和接受批评。建设性批评，谦虚的把问题归到自己头上。别把你的自尊和你的代码等同起来</p>
</li>
<li><p>快速失败-学习-迭代</p>
</li>
<li><p>不要等到完美的时候才出来，只要产品大致可以，就立刻把他按照原样公布给大众。</p>
</li>
<li><p>事后检讨。”学到了什么”，”怎么改正”。</p>
<table>
  <tr><th width="100">简要</th><td></td></tr>
  <tr><th>时间线</th><td></td></tr>
  <tr><th>主因</th><td></td></tr>
  <tr><th>影响和损失评估</th><td></td></tr>
  <tr><th>立即修改正问题的步骤</th><td></td></tr>
  <tr><th>防止此事再次发生的步骤</th><td></td></tr>
  <tr><th>得到的教训</th><td></td></tr>
</table></li>
<li><p>为学习预留时间。人一旦攀至顶峰，往往就会停止学习。偶尔跳出舒适区，接受挑战。</p>
</li>
<li><p>学习保持耐性。</p>
</li>
<li><p>学会示弱。承认自己的无知</p>
</li>
</ul>
<h2 id="培养出色的团队"><a href="#培养出色的团队" class="headerlink" title="培养出色的团队"></a>培养出色的团队</h2><h3 id="什么是文化"><a href="#什么是文化" class="headerlink" title="什么是文化"></a>什么是文化</h3><ul>
<li>团队文化就像是一块含有酵母的面团：酵母(团队创始人)能将菌群培养物植入生面团(团队新人)，从而变成一块好吃的面包(团队)。</li>
<li>团队文化不仅仅包含编写代码的方式或者是成员之间的相处之道，它还包含所有人都认可的经验、价值观、目标。</li>
</ul>
<h3 id="为什么要关心它"><a href="#为什么要关心它" class="headerlink" title="为什么要关心它"></a>为什么要关心它</h3><ul>
<li>接受有益改进，同时防御有害的激进变化的团队文化。</li>
<li>将大部分的时间放在开发优秀软件上面。</li>
<li>近朱者赤近墨者黑。自我选择。</li>
<li>招聘文化契合度高的人。</li>
</ul>
<h3 id="文化和人"><a href="#文化和人" class="headerlink" title="文化和人"></a>文化和人</h3><ul>
<li>让出色的工程师们放心地分享创意，并且在决策过程中拥有发言权。</li>
<li>基于共识决策的团队。”共识”是指每个人都对产品的成功抱有强烈的主人翁精神和责任感，同时领队愿意倾听团队的意见。</li>
<li>大方向一致，设立章程。</li>
</ul>
<h3 id="优秀团队文化中的沟通模式"><a href="#优秀团队文化中的沟通模式" class="headerlink" title="优秀团队文化中的沟通模式"></a>优秀团队文化中的沟通模式</h3><ul>
<li>同步沟通，如开会，人越少越好。异步沟通，如Email，听众越多越好。</li>
</ul>
<h3 id="高层面同步"><a href="#高层面同步" class="headerlink" title="高层面同步"></a>高层面同步</h3><ul>
<li>任务宗旨。准确定义好产品的方向和范围。什么该做，什么不该做。任务宗旨应该是与时俱进的。</li>
<li>开会要有效率。<ul>
<li>只邀请一定要参加的人。</li>
<li>开会前要决定好议程，而且要事先通知所有人。</li>
<li>达成目的后应提早散会。</li>
<li>注意别跑题。</li>
<li>尽量把会议安排在休息时间前后(比如午饭时间，下班前等)。</li>
</ul>
</li>
<li>地理分散的团队，除了用媒介沟通，还应该时不时的见见同事。</li>
<li>设计文档。随项目变化而变化。权衡时间，不要唯设计文档论。</li>
</ul>
<h3 id="每日进行讨论"><a href="#每日进行讨论" class="headerlink" title="每日进行讨论"></a>每日进行讨论</h3><ul>
<li>邮件列表</li>
<li>在线聊天</li>
</ul>
<h3 id="使用bug跟踪系统"><a href="#使用bug跟踪系统" class="headerlink" title="使用bug跟踪系统"></a>使用bug跟踪系统</h3><h3 id="沟通也是工程的一部分"><a href="#沟通也是工程的一部分" class="headerlink" title="沟通也是工程的一部分"></a>沟通也是工程的一部分</h3><ul>
<li>代码注释。一般是用来说明代码里缺失的部分，以及起得不好的名字，然后把代码的功能注释一遍。注释应该尽量解释为什么代码要这样写，而不是解释代码做了什么。</li>
<li>在源文件署名。团队中，可以不署名，在版本控制中可以查到谁的修改。</li>
<li>每个提交都经过代码审查。</li>
<li>真正的测试和发布流程。高自动化，方便可以频繁发布</li>
</ul>
<h3 id="说到底真正重要的还是代码本身"><a href="#说到底真正重要的还是代码本身" class="headerlink" title="说到底真正重要的还是代码本身"></a>说到底真正重要的还是代码本身</h3><h2 id="大海航行靠船长"><a href="#大海航行靠船长" class="headerlink" title="大海航行靠船长"></a>大海航行靠船长</h2><blockquote>
<p>市面上写给经理们看的管理书很多，而本章却是专门写给那些客串管理的工程师看的</p>
</blockquote>
<h3 id="自然界中没有真空地带"><a href="#自然界中没有真空地带" class="headerlink" title="自然界中没有真空地带"></a>自然界中没有真空地带</h3><ul>
<li>软件项目就和船一样：如果没人领航，那群极客只会闲坐在那里无所事事。</li>
</ul>
<h3 id="Deprecated-Manager"><a href="#Deprecated-Manager" class="headerlink" title="@Deprecated Manager"></a>@Deprecated Manager</h3><ul>
<li>以前的经理对待的员工的办法通常和赶骡车的马夫用的差不多：”萝卜+大棒”，但是工程师需要时间和空间进行创造性思考，这种方式不适应。</li>
</ul>
<h3 id="主管才是新经理"><a href="#主管才是新经理" class="headerlink" title="主管才是新经理"></a>主管才是新经理</h3><ul>
<li><p>经理要关心怎么干，而主管只负责设定大方向。</p>
</li>
<li><p>TL(技术主管，tech leader)： 负责产品整体（或者部分）技术走向。</p>
<p>TLM(技术主管经理，tech leader manager)：除了负责产品整体（或者部分）技术走向，还需关系手下工程师的职业发展和愉快程度。</p>
</li>
</ul>
<h3 id="唯一要担心的就是……好吧，所有的事"><a href="#唯一要担心的就是……好吧，所有的事" class="headerlink" title="唯一要担心的就是……好吧，所有的事"></a>唯一要担心的就是……好吧，所有的事</h3><ul>
<li>管理工作不好量化，会感到成就感低，但是要反过来想，如果领导一支优秀工程师组建的团队，那代码的产量能达到多少！</li>
</ul>
<h3 id="仆人式领导"><a href="#仆人式领导" class="headerlink" title="仆人式领导"></a>仆人式领导</h3><ul>
<li>遵循HRT，消除官僚作风。</li>
</ul>
<h3 id="反模式"><a href="#反模式" class="headerlink" title="反模式"></a>反模式</h3><ul>
<li>反模式：雇佣听话的人。</li>
<li>反模式：无视表现不佳的人。设定好一个期限，完成一些目标。目标要设的小点，循序渐进。手把手帮助表现不佳的员工。</li>
<li>反模式：无视人际关系</li>
<li>反模式：和谁都是朋友</li>
<li>反模式：降低招聘标准</li>
<li>反模式：把团队当小孩</li>
</ul>
<h3 id="领袖的处事之道"><a href="#领袖的处事之道" class="headerlink" title="领袖的处事之道"></a>领袖的处事之道</h3><ul>
<li><p>放下自负，鼓励多提问，学会聆听，学会道歉</p>
</li>
<li><p>做一个禅师。保持淡定和冷静。多问问题，引导工程师解决自己的问题。</p>
</li>
<li><p>成为催化剂。引导大家达成共识。</p>
<p>让你的团队了解到你的帮助他们解决障碍的意愿和能力。</p>
<p>给与他们安全感，培养敢于冒风险的氛围。</p>
</li>
<li><p>当一个导师。三个基本条件：</p>
<ul>
<li>熟悉团队的流程；</li>
<li>向他人解释事物的能力；</li>
<li>估计被指导的人到底需要多少帮助的能力。</li>
</ul>
</li>
<li><p>设置明确的目标。每个人都在同一方向上使劲吗？定期检查他们有没有偏离方向。</p>
</li>
<li><p>坦诚。坦诚有些事不能告诉成员。避免使用”三明治赞美法”，这样可能不能准确传达自己的意图。直接了当反馈和批评，但是注意自己的表达方式，不要让工程师被你弄得很防备。</p>
</li>
<li><p>记录快乐程度。不但关注职业生涯，更是可以让你的队员有机会得以成长。每次在会议结束之前问队员”你还有什么要求吗”</p>
</li>
<li><p>其他建议和窍门：</p>
<ul>
<li>不必事事躬亲，但也不能当甩手掌柜；</li>
<li>寻找接班人；</li>
<li>知道什么时候做恶人；</li>
<li>保护团队不受混乱干扰；</li>
<li>帮团队遮风挡雨；</li>
<li>告诉团队他们做得很好。</li>
</ul>
</li>
</ul>
<h3 id="人是植物"><a href="#人是植物" class="headerlink" title="人是植物"></a>人是植物</h3><ul>
<li>人像植物一样：有些需要更多的光照，有些则需要更多的水分。对应着方向和激励。</li>
</ul>
<h3 id="内部激励和外部激励"><a href="#内部激励和外部激励" class="headerlink" title="内部激励和外部激励"></a>内部激励和外部激励</h3><ul>
<li>达到内部激励目的的三样东西。<ul>
<li>自主。自主权，激发主人翁精神。</li>
<li>精通。让工程师有机会学习新技能。</li>
<li>目标。让他们知道自己的努力是有价值的。</li>
</ul>
</li>
</ul>
<h2 id="对付害群之马-会拖累团队的人"><a href="#对付害群之马-会拖累团队的人" class="headerlink" title="对付害群之马(会拖累团队的人)"></a>对付害群之马(会拖累团队的人)</h2><blockquote>
<p>作者是结合自己的实际，由于SVN项目是开源项目，里面涉及到很多外部人员的相处之道。</p>
</blockquote>
<h3 id="什么是”害群”"><a href="#什么是”害群”" class="headerlink" title="什么是”害群”"></a>什么是”害群”</h3><ul>
<li>是指行为，而不是指人。规定好哪些是不可容忍的行为，然后予以惩戒。</li>
</ul>
<h3 id="保护团队"><a href="#保护团队" class="headerlink" title="保护团队"></a>保护团队</h3><ul>
<li>HRT</li>
<li>第二章内容</li>
</ul>
<h3 id="发现威胁"><a href="#发现威胁" class="headerlink" title="发现威胁"></a>发现威胁</h3><ul>
<li>团队的注意力和专注力最容易受到威胁。<ul>
<li>不尊重别人的时间；</li>
<li>自负；</li>
<li>过分索求；</li>
<li>幼稚或是莫名其妙的交流；</li>
<li>偏执妄想；</li>
<li>完美主义。转移注意力；</li>
<li>别去搭理哪些挑衅的家伙；</li>
<li>别太感情用事；</li>
<li>抓住重点；</li>
<li>对付挑衅要不卑不亢；</li>
<li>关注长远。问自己两个关键的问题：<ul>
<li>虽然短期内会损失一些注意力和专注力，长远来讲你真的相信项目会因此受益吗？</li>
<li>你相信这些冲突最终会以有益的方式解决吗？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="操作组织的艺术"><a href="#操作组织的艺术" class="headerlink" title="操作组织的艺术"></a>操作组织的艺术</h2><h3 id="优点、缺点和策略"><a href="#优点、缺点和策略" class="headerlink" title="优点、缺点和策略"></a>优点、缺点和策略</h3><h3 id="理想的情况：团队在公司里应该是怎样运作的"><a href="#理想的情况：团队在公司里应该是怎样运作的" class="headerlink" title="理想的情况：团队在公司里应该是怎样运作的"></a>理想的情况：团队在公司里应该是怎样运作的</h3><ul>
<li>在完美经理手下干活。要求更多的责任，不单要专注手头的任务。</li>
<li>用于冒险</li>
</ul>
<h3 id="现实的情况：当环境成为成功路上的绊脚石"><a href="#现实的情况：当环境成为成功路上的绊脚石" class="headerlink" title="现实的情况：当环境成为成功路上的绊脚石"></a>现实的情况：当环境成为成功路上的绊脚石</h3><ul>
<li>在糟糕的经理手下当值。特点：害怕失败，缺乏安全感，保守，自私</li>
<li>办公室高手，敬而远之。</li>
<li>糟糕的组织。不以工程师为核心，鼓吹商业</li>
</ul>
<h3 id="操纵你的组织"><a href="#操纵你的组织" class="headerlink" title="操纵你的组织"></a>操纵你的组织</h3><ul>
<li><p>向上请求许可，向下请求谅解。</p>
</li>
<li><p>路是人走出来的。寻求改变的办法就是拉拢群众。</p>
</li>
<li><p>学习向上管理。做承诺的时候要谨慎，而干工作的时候要尽最大努力。</p>
<p>“进取型”（用户看得到的）和”防御性”（产品长期健康的）工作。</p>
</li>
<li><p>运气与互惠的经济学。</p>
</li>
<li><p>晋升到安全的位置。掌控自己在公司的命运。</p>
</li>
<li><p>和有能量的人交朋友。</p>
</li>
<li><p>如何通过E-mail向忙碌的管理层求助。10秒钟读完，”三个论点，一个行动”。</p>
</li>
</ul>
<h3 id="B计划：走为上策"><a href="#B计划：走为上策" class="headerlink" title="B计划：走为上策"></a>B计划：走为上策</h3><ul>
<li>只做正确的事，随时准备被炒</li>
</ul>
<h3 id="不要放弃"><a href="#不要放弃" class="headerlink" title="不要放弃"></a>不要放弃</h3><h2 id="用户也是人"><a href="#用户也是人" class="headerlink" title="用户也是人"></a>用户也是人</h2><blockquote>
<p>主要是用户体验方面的。营销、易用性、客服</p>
</blockquote>
<h3 id="管理大众的印象"><a href="#管理大众的印象" class="headerlink" title="管理大众的印象"></a>管理大众的印象</h3><ul>
<li>软件也需要营销</li>
<li>关心用户对软件的情感诉求</li>
<li>注意第一印象</li>
<li>承诺的时候要谨言，做产品的时候要超过预期</li>
<li>尊重业界分析师</li>
<li>关注用户，其他东西会随之而来</li>
<li>目标用户</li>
<li>考虑入门的门槛</li>
<li>衡量使用数量，而不是用户数量</li>
<li>速度很重要</li>
<li>不要大而全。与其拙劣地解决所有问题女，还不如解决大多数用户都真正会遇到的问题，然后做到最好</li>
<li>隐藏复杂性</li>
</ul>
<h3 id="管理和用户之间的关系"><a href="#管理和用户之间的关系" class="headerlink" title="管理和用户之间的关系"></a>管理和用户之间的关系</h3><ul>
<li>听取用户反馈</li>
<li>不要有优越感</li>
<li>保持耐心</li>
<li>营造信任和愉悦的氛围</li>
</ul>
]]></content>
      <categories>
        <category>书籍</category>
        <category>计算机管理</category>
      </categories>
      <tags>
        <tag>书摘</tag>
      </tags>
  </entry>
</search>
